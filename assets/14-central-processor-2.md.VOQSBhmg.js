import{_ as n,D as s,o as Q,c as l,I as a,w as e,k as t,a as r,R as i}from"./chunks/framework.XJWvSVd6.js";const d="/assets/image_21Op8DVbC6.TwPTwmmj.png",p="/assets/image_39UiGINx63.2_Y1C44S.png",m="/assets/image_wReRFPuJcQ.Oina9Sgx.png",h="/assets/image_AXin6tTvj3.ls588F9j.png",c="/assets/image_94AssI2vaC.KoocHyTw.png",F=JSON.parse('{"title":"06 中央处理器 (4~6)","description":"","frontmatter":{},"headers":[],"relativePath":"14-central-processor-2.md","filePath":"14-central-processor-2.md","lastUpdated":1704349964000}'),u={name:"14-central-processor-2.md"},H=i('<h1 id="_06-中央处理器-4-6" tabindex="-1">06 中央处理器 (4~6) <a class="header-anchor" href="#_06-中央处理器-4-6" aria-label="Permalink to &quot;06 中央处理器 (4\\~6)&quot;">​</a></h1><h2 id="微程序控制原理" tabindex="-1">微程序控制原理 <a class="header-anchor" href="#微程序控制原理" aria-label="Permalink to &quot;微程序控制原理&quot;">​</a></h2><p>微程序设计技术的实质是将程序设计技术和存储技术相结合，即用程序设计的思想方法来组织操作控制逻辑，将微操作控制信号按一定规则进行信息编码（代码化），形成控制字（微指令），再把这些微指令按时间先后排列起来构成微程序，存放在一个只读的控制存储器中。</p><h3 id="微程序控制的基本概念" tabindex="-1">微程序控制的基本概念 <a class="header-anchor" href="#微程序控制的基本概念" aria-label="Permalink to &quot;微程序控制的基本概念&quot;">​</a></h3><h4 id="微程序设计的提出与发展" tabindex="-1">微程序设计的提出与发展 <a class="header-anchor" href="#微程序设计的提出与发展" aria-label="Permalink to &quot;微程序设计的提出与发展&quot;">​</a></h4><p>微程序设计的概念和原理是由 M.V.Wilkes 教授提出来的：一条机器指令可以分解为许多基本的微命令序列。并且首先把这种思想用于计算机控制器的设计。但是由于当时还不具备制造专门存放微程序的控制存储器的技术，所以在十几年时间内实际上并未真正使用。直到 1964 年，IBM 公司在 IBM360 系列机上成功地采用了微程序设计技术，解决了指令系统的兼容问题。20 世纪 70 年代以来，由于 VLSI 技术的发展，推动了微程序设计技术的发展和应用，目前，大多数计算机都采用微程序设计技术。</p><h4 id="基本术语" tabindex="-1">基本术语 <a class="header-anchor" href="#基本术语" aria-label="Permalink to &quot;基本术语&quot;">​</a></h4><ol><li><p>微命令和微操作</p><p>一条机器指令可以分解成一个微操作序列，这些微操作是计算机中最基本的、不可再分解的操作。在微程序控制的计算机中，将控制部件向执行部件发出的各种控制命令叫做微命令，它是构成控制序列的最小单位。例如：打开或关闭某个控制门的电位信号、某个寄存器的打入脉冲等。因此，微命令是控制计算机各部件完成某个基本微操作的命令。</p><p>微命令和微操作是一一对应的。微命令是微操作的控制信号，微操作是微命令的操作过程。</p><p>微命令有兼容性和互斥性之分。兼容性微命令是指那些可以同时产生，共同完成某一些微操作的微命令；而互斥性微命令是指在机器中不允许同时出现的微命令。兼容和互斥都是相对的，一个微命令可以和一些微命令兼容，和另一些微命令互斥。对于单独一个微命令，谈论其兼容和互斥都是没有意义的。</p></li><li><p>微指令、微地址</p><p>微指令是指控制存储器中的一个单元的内容，即控制字，是若干个微命令的集合。存放控制字的控制存储器的单元地址就称为微地址。</p><p>一条微指令通常包含两部分：</p><ol><li>操作控制字段，又称微操作码字段，用以产生某一步操作所需的各微操作控制信号；</li><li>顺序控制字段，又称微地址码字段，用以控制产生下一条要执行的微指令地址。 微指令有垂直型和水平型之分。垂直型微指令接近于机器指令的格式，每条微指令只能完成一个基本微操作；水平型微指令则具有良好的并行性，每条微指令可以完成较多的基本微操作。</li></ol></li><li><p>微周期</p><p>从控制存储器中读取一条微指令并执行相应的微命令所需的全部时间称为微周期。</p></li><li><p>微程序</p><p>一系列微指令的有序集合就是微程序。每一条机器指令都对应一个微程序。</p></li></ol><blockquote><p>注意：微程序和程序是两个不同的概念。微程序是由微指令组成的，用于描述机器指令，微程序实际上是机器指令的实时解释器，是由计算机的设计者事先编制好并存放在控制存储器中的，一般不提供给用户。对于程序员来说，计算机系统中微程序一级的结构和功能是透明的，无须知道。而程序最终由机器指令组成，是由软件设计人员事先编制好并存放在主存或辅存中的。所以说，微程序控制的计算机涉及到两个层次：一个是机器语言或汇编语言程序员所看到的传统机器层，包括：机器指令、工作程序、主存储器；另一个是机器设计者看到的微程序层，包括：微指令、微程序和控制存储器。</p></blockquote><h3 id="微指令编码法" tabindex="-1">微指令编码法 <a class="header-anchor" href="#微指令编码法" aria-label="Permalink to &quot;微指令编码法&quot;">​</a></h3><p>微指令可以分成操作控制字段和顺序控制字段两大部分。这里所说的微指令编码法指的就是操作控制字段的编码方法。各类计算机从各自的特点出发，设计了各种各样的微指令编码法。例如：大型机强调速度，要求译码过程尽量快；微、小型机则更多地注意经济性，要求更大限度地缩短微指令字长；而中型机介于这两者之间，兼顾速度和价格，要求在保证一定速度的情况下，能尽量缩短微指令字长。</p><h4 id="直接控制法-不译码法" tabindex="-1">直接控制法（不译码法） <a class="header-anchor" href="#直接控制法-不译码法" aria-label="Permalink to &quot;直接控制法（不译码法）&quot;">​</a></h4><p>操作控制字段中的各位分别可以直接控制计算机，无须进行译码。在这种形式的微指令字中，操作控制字段的每一个独立的二进制位代表一个微命令，该位为“1”表示这个微命令有效，为“0”则表示这个微命令无效。每个微命令对应并控制数据通路中的一个微操作。</p><p>这种方法结构简单，并行性强，操作速度快，但是微指令字太长。若微命令的总数为 N 个，则微指令字的操作控制字段就要有 N 位。在某些计算机中，微命令的总数可能会多达三、四百个，甚至更多，这使微指令的长度达到难以接受的地步。另外，在 N 个微命令中，有许多是互斥的，不允许并行操作，将它们安排在一条微指令中是毫无意义的，只会使信息的利用率下降。所以这种方法在复杂的系统中很少单独采用，往往与其他编码方法混合起来使用。</p><h4 id="最短编码法" tabindex="-1">最短编码法 <a class="header-anchor" href="#最短编码法" aria-label="Permalink to &quot;最短编码法&quot;">​</a></h4><p>直接控制法使微指令字过长，而最短编码法则走向另一个极端，使得微指令字最短。这种方法将所有的微命令统一编码，每条微指令只定义一个微命令。若微命令的总数为 N，操作控制字段的长度为 L，则最短编码法应满足下列关系式：</p>',16),L={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.464ex"},xmlns:"http://www.w3.org/2000/svg",width:"10.405ex",height:"2.034ex",role:"img",focusable:"false",viewBox:"0 -694 4599.1 899","aria-hidden":"true"},x=t("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[t("g",{"data-mml-node":"math"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D43F",d:"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mo",transform:"translate(958.8,0)"},[t("path",{"data-c":"2265",d:"M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mi",transform:"translate(2014.6,0)"},[t("path",{"data-c":"1D459",d:"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mi",transform:"translate(2312.6,0)"},[t("path",{"data-c":"1D45C",d:"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"msub",transform:"translate(2797.6,0)"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D454",d:"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mn",transform:"translate(510,-150) scale(0.707)"},[t("path",{"data-c":"32",d:"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z",style:{"stroke-width":"3"}})])]),t("g",{"data-mml-node":"mi",transform:"translate(3711.1,0)"},[t("path",{"data-c":"1D441",d:"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z",style:{"stroke-width":"3"}})])])],-1),f=[x],w=t("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[t("mi",null,"L"),t("mo",null,"≥"),t("mi",null,"l"),t("mi",null,"o"),t("msub",null,[t("mi",null,"g"),t("mn",null,"2")]),t("mi",null,"N")],-1),_=i('<p>最短编码法的微指令字长最短，但要通过一个微命令译码器译码以后才能得到需要的微命令。微命令数目越多，译码器就越复杂。这种方法在同一时刻只能产生一个微命令，不能充分利用机器硬件所具有的并行性，使得机器指令对应的微程序变得很长，而且对于某些要求在同一时刻同时动作的组合性微操作将无法实现。因此，这种方法也只能与其他方法混合使用。</p><h4 id="字段编码法" tabindex="-1">字段编码法 <a class="header-anchor" href="#字段编码法" aria-label="Permalink to &quot;字段编码法&quot;">​</a></h4><p>这是前述两种编码法的一个折衷的方法，既具有两者的优点，又克服了它们的缺点。这种方法将操作控制字段分为若干个小段，每段内采用最短编码法，段与段之间采用直接控制法。</p><ol><li><p>字段直接编码法</p><p>各字段都可以独立地定义本字段的微命令，而和其他字段无关，因此又称为显式编码或单重定义编码方法。这种方法缩短了微指令字，因此得到了广泛的应用。</p><p>字段直接编码法：</p><p><img src="'+d+'" alt=""></p></li><li><p>字段间接编码法</p><p>字段间接编码法是在字段直接编码法的基础上，用来进一步缩短微指令字长的方法。间接编码的含义是，一个字段的某些编码不能独立地定义某些微命令，而需要与其他字段的编码来联合定义，因此又称为隐式编码或多重定义编码方法。</p><p><img src="'+p+'" alt=""></p></li></ol><p>字段编码法中操作控制字段的分段原则：</p><ol><li>把互斥性的微命令分在同一段内，兼容性的微命令分在不同段内。这样不仅有助于提高信息的利用率，缩短微指令字长，而且有助于充分利用硬件所具有的并行性，加快执行的速度。</li><li>应与数据通路结构相适应。</li><li>每个小段中包含的信息位不能太多，否则将增加译码线路的复杂性和译码时间。</li><li>一般每个小段还要留出一个状态，表示本字段不发出任何微命令。因此当某字段的长度为三位时，最多只能表示七个互斥的微命令，通常用 000 表示不操作。</li></ol><h3 id="微程序控制器的组成和工作过程" tabindex="-1">微程序控制器的组成和工作过程 <a class="header-anchor" href="#微程序控制器的组成和工作过程" aria-label="Permalink to &quot;微程序控制器的组成和工作过程&quot;">​</a></h3><h4 id="微程序控制器的基本组成" tabindex="-1">微程序控制器的基本组成 <a class="header-anchor" href="#微程序控制器的基本组成" aria-label="Permalink to &quot;微程序控制器的基本组成&quot;">​</a></h4><p>下图给出了一个微程序控制器基本结构的简化框图，在图中主要画出了微程序控制器比组合逻辑控制器多出的部件，包括以下几个部分：控制存储器、微指令寄存器、微地址形成部件、微地址寄存器等。</p><p>微程序控制器的基本结构：</p><p><img src="'+m+'" alt=""></p><ol><li><p>控制存储器（CM）</p><p>这是微程序控制器的核心部件，用来存放微程序。</p></li><li><p>微指令寄存器（mIR）</p><p>用来存放从 CM 中取出的微指令。</p></li><li><p>微地址形成部件</p><p>用来产生初始微地址和后继微地址。</p></li><li><p>微地址寄存器（mMAR）</p><p>接受微地址形成部件送来的微地址，为在 CM 中读取微指令做准备。</p></li></ol><h4 id="微程序控制器的工作过程" tabindex="-1">微程序控制器的工作过程 <a class="header-anchor" href="#微程序控制器的工作过程" aria-label="Permalink to &quot;微程序控制器的工作过程&quot;">​</a></h4><ol><li>执行取指令公共操作。取指令的公共操作通常由一个取指微程序来完成，这个取指微程序也可能仅由一条微指令组成。具体的执行是：在机器开始运行时，自动将取指微程序的入口微地址送 mMAR，并从 CM 中读出相应的微指令送入 mIR。微指令的操作控制字段产生有关的微命令，用来控制计算机实现取机器指令的公共操作。取指微程序的入口地址一般为 CM 的 0 号单元，当取指微程序执行完后，从主存中取出的机器指令就已存入指令寄存器 IR 中了。</li><li>由机器指令的操作码字段通过微地址形成部件产生该机器指令所对应的微程序的入口地址，并送入 mMAR。</li><li>从 CM 中逐条取出对应的微指令并执行之。</li><li>执行完对应于一条机器指令的一个微程序后又回到取指微程序的入口地址，继续第 ① 步，以完成取下一条机器指令的公共操作。</li></ol><p>以上是一条机器指令的执行过程，如此周而复始，直到整个程序执行完毕为止。</p><h4 id="机器指令对应的微程序" tabindex="-1">机器指令对应的微程序 <a class="header-anchor" href="#机器指令对应的微程序" aria-label="Permalink to &quot;机器指令对应的微程序 &amp;#x20;&quot;">​</a></h4><p>通常，一条机器指令对应一个微程序。由于任何一条机器指令的取指令操作都是相同的，因此将取指令操作的微命令统一编成一个微程序，这个微程序只负责将指令从主存单元中取出送至指令寄存器中。此外，也可以编出对应间址周期的微程序和中断周期的微程序。这样，控制存储器中的微程序个数应为机器指令数再加上对应取指、间址和中断周期等公用的微程序数。</p><h3 id="微程序入口地址的形成" tabindex="-1">微程序入口地址的形成 <a class="header-anchor" href="#微程序入口地址的形成" aria-label="Permalink to &quot;微程序入口地址的形成&quot;">​</a></h3><p>当公用的取指微程序从主存中取出机器指令之后，由机器指令的操作码字段指出各个微程序的入口地址（初始微地址）。这是一种多分支（或多路转移）的情况。由机器指令的操作码转换成初始微地址的方式主要有 3 种。</p><h4 id="一级功能转换" tabindex="-1">一级功能转换 <a class="header-anchor" href="#一级功能转换" aria-label="Permalink to &quot;一级功能转换&quot;">​</a></h4><p>如果机器指令操作码字段的位数和位置固定，可以直接使操作码与入口地址码的部分位相对应。</p><h4 id="二级功能转换" tabindex="-1">二级功能转换 <a class="header-anchor" href="#二级功能转换" aria-label="Permalink to &quot;二级功能转换&quot;">​</a></h4><p>当同类机器指令的操作码字段的位数和位置固定，而不同类机器指令的操作码的位数和位置不固定时，就不能再采用一级功能转换的方法。所谓二级功能转换是指第一次先按指令类型标志转移，以区分出指令属于哪一类，如：是单操作数指令，还是双操作数指令等。因为每一类机器指令中操作码字段的位数和位置是固定的，所以第二次即可按操作码区分出具体是哪条指令，以便找出相应微程序的入口微地址。</p><h4 id="通过-pla-电路实现功能转换" tabindex="-1">通过 PLA 电路实现功能转换 <a class="header-anchor" href="#通过-pla-电路实现功能转换" aria-label="Permalink to &quot;通过 PLA 电路实现功能转换 &amp;#x20;&quot;">​</a></h4><p>当机器指令的操作码位数和位置都不固定时，可以采用 PLA 电路将每条机器指令的操作码翻译成对应的微程序入口地址。这种方法对于变长度、变位置的操作码显得更有效，而且转换速度较快。</p><h3 id="后继微地址的形成" tabindex="-1">后继微地址的形成 <a class="header-anchor" href="#后继微地址的形成" aria-label="Permalink to &quot;后继微地址的形成&quot;">​</a></h3><h4 id="增量方式-顺序-转移型微地址" tabindex="-1">增量方式（顺序－转移型微地址） <a class="header-anchor" href="#增量方式-顺序-转移型微地址" aria-label="Permalink to &quot;增量方式（顺序－转移型微地址）&quot;">​</a></h4><p>顺序执行时后继微地址就是现行微地址加上一个增量（通常为“1”）；转移或转子时，由微指令的顺序控制字段产生转移微地址。因此，在微程序控制器中应当有一个微程序计数器（mPC）。为了降低成本，一般情况下都是将微地址寄存器 mMAR 改为具有计数功能的寄存器，以代替 mPC。</p><p>增量方式的优点是简单，易于掌握，编制微程序容易，每条机器指令所对应的一段微程序一般安排在 CM 的连续单元中；其缺点是这种方式不能实现两路以上的并行微程序转移，因而不利于提高微程序的执行速度。</p><h4 id="断定方式" tabindex="-1">断定方式 <a class="header-anchor" href="#断定方式" aria-label="Permalink to &quot;断定方式&quot;">​</a></h4><p>断定方式的后继微地址可由微程序设计者指定，或者根据微指令所规定的测试结果直接决定后继微地址的全部或部分值。</p><p>这是一种直接给定与测试断定相结合的方式，其顺序控制字段一般由两部分组成：非测试段和测试段。</p>',32),k={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"2.279ex",height:"1.528ex",role:"img",focusable:"false",viewBox:"0 -675.5 1007.3 675.5","aria-hidden":"true"},g=t("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[t("g",{"data-mml-node":"math"},[t("g",{"data-mml-node":"msup"},[t("g",{"data-mml-node":"mn"},[t("path",{"data-c":"32",d:"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mi",transform:"translate(533,363) scale(0.707)"},[t("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])])],-1),b=[g],M=t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("msup",null,[t("mn",null,"2"),t("mi",null,"n")])],-1),y=i('<h3 id="微程序设计" tabindex="-1">微程序设计 <a class="header-anchor" href="#微程序设计" aria-label="Permalink to &quot;微程序设计&quot;">​</a></h3><ol><li><p>水平型微指令及水平型微程序设计</p><p>一次能定义并能并行执行多个微命令的微指令。它的并行操作能力强，效率高，灵活性强，执行一条机器指令所需微指令的数目少，执行时间短；但微指令字较长，增加了控存的横向容量，同时微指令和机器指令的差别很大，设计者只有熟悉了数据通路，才有可能编制出理想的微程序，一般用户不易掌握。由于水平型微程序设计是面对微处理器内部逻辑控制的描述，所以把这种微程序设计方法称为硬方法</p></li><li><p>垂直型微指令及垂直型微程序设计</p><p>一次只能执行一个微命令的微指令。它的并行操作能力差，一般只能实现一个微操作，控制一两个信息传送通路，效率低，执行一条机器指令所需的微指令数目多，执行时间长；但是微指令与机器指令很相似，所以容易掌握和利用，编程比较简单，不必过多地了解数据通路的细节，且微指令字较短。由于垂直型微程序设计是面向算法的描述，所以把这种微程序设计方法称为软方法。</p></li><li><p>混合型微指令</p><p>综合前述两者特点的微指令称为混合型微指令，它具有不太长的微指令字，又具有一定的并行控制能力，可高效地去实现机器的指令系统。</p></li></ol><h2 id="控制单元的设计" tabindex="-1">控制单元的设计 <a class="header-anchor" href="#控制单元的设计" aria-label="Permalink to &quot;控制单元的设计&quot;">​</a></h2><p>前面几节讨论了控制器的基本功能和 CPU 的总体结构，为了加深对这些内容的理解，这一节将以一个简单的 CPU 为例来讨论控制器中控制单元的设计。为了突出重点，减少篇幅，我们选择的 CPU 模型比较简单，指令系统中仅具有最常见的基本指令和寻址方式，在逻辑结构、时序安排、操作过程安排等方面尽量规整、简单，使初学者比较容易掌握，以帮助大家建立整机概念。</p><h3 id="简单的-cpu-模型" tabindex="-1">简单的 CPU 模型 <a class="header-anchor" href="#简单的-cpu-模型" aria-label="Permalink to &quot;简单的 CPU 模型&quot;">​</a></h3><p>控制单元的主要功能是根据需要发出各种不同的微操作控制信号。微操作控制信号是与 CPU 的数据通路密切相关的。</p><p>图 6-18 中 MAR 和 MDR 分别直接与地址总线和数据总线相连。考虑到从存储器取出的指令或有效地址都先送至 MDR 再送至 IR，故这里省去 IR 送至 MAR 的数据通路，凡是需从 IR 送至 MAR 的操作均由 MDR 送至 MAR 代替。</p><p><img src="'+h+'" alt=""></p><h4 id="非访存指令" tabindex="-1">非访存指令 <a class="header-anchor" href="#非访存指令" aria-label="Permalink to &quot;非访存指令&quot;">​</a></h4><p>这类指令在执行周期不访问存储器。</p><ol><li>清除累加器指令 CLA</li><li>累加器取反指令 COM</li><li>累加器加 1 指令 INC</li><li>算术右移一位指令 SHR</li><li>循环左移一位指令 CSL</li><li>停机指令 STP</li></ol><h4 id="访存指令" tabindex="-1">访存指令 <a class="header-anchor" href="#访存指令" aria-label="Permalink to &quot;访存指令&quot;">​</a></h4><p>这类指令在执行周期需访问存储器。</p><ol><li>加法指令 ADD</li><li>减法指令 SUB</li><li>与指令 AND</li><li>取数指令 LDA</li><li>存数指令 STA</li></ol><h4 id="转移类指令" tabindex="-1">转移类指令 <a class="header-anchor" href="#转移类指令" aria-label="Permalink to &quot;转移类指令&quot;">​</a></h4><p>转移指令在执行周期也不访问存储器。</p><ol><li>无条件转移指令 JMP</li><li>零转移指令 JZ</li><li>负转移指令 JN</li><li>进位转移指令 JC</li></ol><h3 id="组合逻辑控制单元设计" tabindex="-1">组合逻辑控制单元设计 <a class="header-anchor" href="#组合逻辑控制单元设计" aria-label="Permalink to &quot;组合逻辑控制单元设计&quot;">​</a></h3><h4 id="微操作的节拍安排" tabindex="-1">微操作的节拍安排 <a class="header-anchor" href="#微操作的节拍安排" aria-label="Permalink to &quot;微操作的节拍安排&quot;">​</a></h4><p>假设机器采用同步控制，每个机器周期包括 3 个节拍，安排微操作节拍时应注意：</p><ol><li>有些微操作的次序是不容改变的，故安排微操作节拍时必须注意微操作的先后顺序。</li><li>凡是被控制对象不同的微操作，若能在一个节拍内执行，应尽可能安排在同一个节拍内，以节省时间。</li><li>如果有些微操作所占的时间不长，应该将它们安排在一个节拍内完成，并且允许这些微操作有先后次序。</li></ol><p>下面将详细介绍。</p><ol><li><p>取指周期微操作的节拍安排</p><p>取指周期的操作是公操作，其完成的任务已在前面进行过描述，在此不再重复，这些操作可以安排在 3 个节拍中完成。</p><p>T0 (PC)→MAR，Read</p><p>T1 M(MAR)→MDR，(PC)+1→PC</p><p>T2 (MDR)→IR</p><p>考虑到指令译码时间较短，可将指令译码 OP(IR)→ID 也安排在 T2 节拍内。</p></li><li><p>间址周期微操作的节拍安排</p><p>间址周期完成取操作数有效地址的任务，具体操作如下：</p><ol><li>将指令的地址码部分（形式地址）送至存储器地址寄存器，记作(MDR)→MAR；</li><li>向主存发读命令，启动主存读操作，记作 Read；</li><li>将 MAR 所指的主存单元中的内容（有效地址）经数据总线读至 MDR，记作 M(MAR)→MDR；</li><li>将有效地址送至存储器地址寄存器 MAR，记作(MDR)→MAR。此操作在有些机器中可省略。</li></ol></li></ol><h4 id="组合逻辑设计步骤" tabindex="-1">组合逻辑设计步骤 <a class="header-anchor" href="#组合逻辑设计步骤" aria-label="Permalink to &quot;组合逻辑设计步骤&quot;">​</a></h4><ol><li><p>列出微操作命令的操作时间表</p></li><li><p>进行微操作信号综合</p><p>在列出微操作时间表之后，即可对它们进行综合分析、归类，根据微操作时间表可以写出各微操作控制信号的逻辑表达式。</p></li><li><p>画出微操作命令的逻辑图</p><p>根据逻辑表达式可画出对应每一个微操作信号的逻辑电路图，并用逻辑门电路实现之。</p></li></ol><h3 id="微程序控制单元设计" tabindex="-1">微程序控制单元设计 <a class="header-anchor" href="#微程序控制单元设计" aria-label="Permalink to &quot;微程序控制单元设计&quot;">​</a></h3><p>微程序设计控制单元的主要任务是编写对应各条机器指令的微程序，具体步骤是首先写出对应机器指令的全部微操作节拍安排，然后确定微指令格式，最后编写出每条微指令的二进制代码。</p><p>微程序控制单元的设计步骤：</p><ol><li><p>确定微程序控制方式</p><p>根据计算机系统的性能指标（主要是速度）确定微程序控制方式。</p></li><li><p>拟定微命令系统</p><p>初步拟定微命令系统，并同时进行微指令格式的设计，包括微指令字段的划分、编码方式的选择、初始微地址和后继微地址的形成等等。</p></li><li><p>编制微程序</p><p>对微命令系统、微指令格式进行反复的核对和审查，并进行适当的修改；对重复和多余的微指令进行合并和精简，直至编制出全部机器指令的微程序为止。</p></li><li><p>微程序代码化</p><p>将修改完善的微程序转换成二进制代码，这一过程称为代码化或代真。</p></li><li><p>写入控制存储器</p><p>最后将一串串二进制代码按地址写入控制存储器的对应单元。</p></li></ol><h2 id="流水线技术" tabindex="-1">流水线技术 <a class="header-anchor" href="#流水线技术" aria-label="Permalink to &quot;流水线技术&quot;">​</a></h2><p>对于指令的执行，可有几种控制方式：顺序方式、重叠方式、先行控制及流水线控制方式。顺序方式指的是各条机器指令之间顺序串行的执行，即执行完一条指令后，方可取出下一条指令来执行。这种方式控制简单，但速度慢，机器各部件的利用率低。为了加快指令的执行速度，充分利用计算机系统的硬件资源，提高机器的吞吐率，计算机中常采用重叠方式、先行控制方式，以及流水线控制方式。</p><h3 id="重叠控制" tabindex="-1">重叠控制 <a class="header-anchor" href="#重叠控制" aria-label="Permalink to &quot;重叠控制&quot;">​</a></h3><p>通常，一条指令的执行过程可以分为 3 个阶段：取指、分析、执行。假定每个阶段所需的时间为 t，采用顺序方式执行 n 条指令所需的时间为</p>',33),V={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"7.915ex",height:"1.717ex",role:"img",focusable:"false",viewBox:"0 -677 3498.6 759","aria-hidden":"true"},q=t("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[t("g",{"data-mml-node":"math"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D447",d:"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mo",transform:"translate(981.8,0)"},[t("path",{"data-c":"3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mn",transform:"translate(2037.6,0)"},[t("path",{"data-c":"33",d:"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mi",transform:"translate(2537.6,0)"},[t("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mi",transform:"translate(3137.6,0)"},[t("path",{"data-c":"1D461",d:"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z",style:{"stroke-width":"3"}})])])],-1),P=[q],Z=t("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[t("mi",null,"T"),t("mo",null,"="),t("mn",null,"3"),t("mi",null,"n"),t("mi",null,"t")],-1),D=t("p",null,"最早出现的重叠是“取指 K+1”和“执行 K”在时间上的重叠，称为一次重叠，这将使处理机速度有所提高，所需执行时间减少为",-1),C={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"35.546ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 15711.4 1000","aria-hidden":"true"},v=t("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[t("g",{"data-mml-node":"math"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D447",d:"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mo",transform:"translate(981.8,0)"},[t("path",{"data-c":"3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mn",transform:"translate(2037.6,0)"},[t("path",{"data-c":"33",d:"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mi",transform:"translate(2537.6,0)"},[t("path",{"data-c":"D7",d:"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mi",transform:"translate(3315.6,0)"},[t("path",{"data-c":"1D461",d:"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mo",transform:"translate(3898.8,0)"},[t("path",{"data-c":"2B",d:"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mo",transform:"translate(4899,0)"},[t("path",{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mi",transform:"translate(5288,0)"},[t("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mo",transform:"translate(6110.2,0)"},[t("path",{"data-c":"2212",d:"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mn",transform:"translate(7110.4,0)"},[t("path",{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mo",transform:"translate(7610.4,0)"},[t("path",{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mi",transform:"translate(7999.4,0)"},[t("path",{"data-c":"D7",d:"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mn",transform:"translate(8777.4,0)"},[t("path",{"data-c":"32",d:"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mi",transform:"translate(9277.4,0)"},[t("path",{"data-c":"1D461",d:"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mo",transform:"translate(9916.2,0)"},[t("path",{"data-c":"3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mo",transform:"translate(10972,0)"},[t("path",{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mn",transform:"translate(11361,0)"},[t("path",{"data-c":"32",d:"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mi",transform:"translate(11861,0)"},[t("path",{"data-c":"D7",d:"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mi",transform:"translate(12639,0)"},[t("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mo",transform:"translate(13461.2,0)"},[t("path",{"data-c":"2B",d:"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mn",transform:"translate(14461.4,0)"},[t("path",{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mo",transform:"translate(14961.4,0)"},[t("path",{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mi",transform:"translate(15350.4,0)"},[t("path",{"data-c":"1D461",d:"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z",style:{"stroke-width":"3"}})])])],-1),R=[v],A=t("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[t("mi",null,"T"),t("mo",null,"="),t("mn",null,"3"),t("mi",null,"×"),t("mi",null,"t"),t("mo",null,"+"),t("mo",{stretchy:"false"},"("),t("mi",null,"n"),t("mo",null,"−"),t("mn",null,"1"),t("mo",{stretchy:"false"},")"),t("mi",null,"×"),t("mn",null,"2"),t("mi",null,"t"),t("mo",null,"="),t("mo",{stretchy:"false"},"("),t("mn",null,"2"),t("mi",null,"×"),t("mi",null,"n"),t("mo",null,"+"),t("mn",null,"1"),t("mo",{stretchy:"false"},")"),t("mi",null,"t")],-1),S=t("p",null,"如果进一步增加重叠，使“取指 K+2”、“分析 K+1”和“执行 K”重叠起来，称为二次重叠，则处理机速度还可以进一步提高，所需执行时间减少为",-1),I={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"29.763ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 13155.4 1000","aria-hidden":"true"},B=t("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[t("g",{"data-mml-node":"math"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D447",d:"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mo",transform:"translate(981.8,0)"},[t("path",{"data-c":"3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mn",transform:"translate(2037.6,0)"},[t("path",{"data-c":"33",d:"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mi",transform:"translate(2537.6,0)"},[t("path",{"data-c":"D7",d:"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mi",transform:"translate(3315.6,0)"},[t("path",{"data-c":"1D461",d:"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mo",transform:"translate(3898.8,0)"},[t("path",{"data-c":"2B",d:"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mo",transform:"translate(4899,0)"},[t("path",{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mi",transform:"translate(5288,0)"},[t("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mo",transform:"translate(6110.2,0)"},[t("path",{"data-c":"2212",d:"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mn",transform:"translate(7110.4,0)"},[t("path",{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mo",transform:"translate(7610.4,0)"},[t("path",{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mi",transform:"translate(7999.4,0)"},[t("path",{"data-c":"1D461",d:"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mo",transform:"translate(8638.2,0)"},[t("path",{"data-c":"3D",d:"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mo",transform:"translate(9694,0)"},[t("path",{"data-c":"28",d:"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mn",transform:"translate(10083,0)"},[t("path",{"data-c":"32",d:"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mo",transform:"translate(10805.2,0)"},[t("path",{"data-c":"2B",d:"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mi",transform:"translate(11805.4,0)"},[t("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mo",transform:"translate(12405.4,0)"},[t("path",{"data-c":"29",d:"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z",style:{"stroke-width":"3"}})]),t("g",{"data-mml-node":"mi",transform:"translate(12794.4,0)"},[t("path",{"data-c":"1D461",d:"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z",style:{"stroke-width":"3"}})])])],-1),N=[B],j=t("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[t("mi",null,"T"),t("mo",null,"="),t("mn",null,"3"),t("mi",null,"×"),t("mi",null,"t"),t("mo",null,"+"),t("mo",{stretchy:"false"},"("),t("mi",null,"n"),t("mo",null,"−"),t("mn",null,"1"),t("mo",{stretchy:"false"},")"),t("mi",null,"t"),t("mo",null,"="),t("mo",{stretchy:"false"},"("),t("mn",null,"2"),t("mo",null,"+"),t("mi",null,"n"),t("mo",{stretchy:"false"},")"),t("mi",null,"t")],-1),J=i('<p><img src="'+c+'" alt="重叠控制方式" title="重叠控制方式"></p><h3 id="先行控制原理" tabindex="-1">先行控制原理 <a class="header-anchor" href="#先行控制原理" aria-label="Permalink to &quot;先行控制原理&quot;">​</a></h3><p>先行控制是重叠控制的一种改进方式。在重叠控制中，“执行 K”和“分析 K+1”重叠，如果所有指令的“分析”与“执行”的时间均相等，则重叠的流程是非常流畅的，无任何阻碍，机器的指令分析部件和执行部件功能充分地发挥，机器的速度也能显著地提高。但是，现代计算机的指令系统很复杂，各种类型指令难于做到“分析”与“执行”时间始终相等。此时，各个阶段的控制部件就有可能出现间断等待的问题。这样，指令的分析部件和执行部件都不能连续地、流畅地工作，从而使机器的整体速度受到影响。</p><h3 id="流水工作原理" tabindex="-1">流水工作原理 <a class="header-anchor" href="#流水工作原理" aria-label="Permalink to &quot;流水工作原理&quot;">​</a></h3><p>流水处理技术是在重叠、先行控制方式的基础上发展起来的，它基于重叠的原理，但却是在更高程度上的重叠。</p><h4 id="流水线" tabindex="-1">流水线 <a class="header-anchor" href="#流水线" aria-label="Permalink to &quot;流水线&quot;">​</a></h4><p>流水线是将一个较复杂的处理过程分成 m 个复杂程度相当、处理时间大致相等的子过程，每个子过程由一个独立的功能部件来完成，处理对象在各子过程连成的线路上连续流动。在同一时间，m 个部件同时进行不同的操作，完成对不同子过程的处理。</p><p>这种方式类似于现代工厂的生产流水线，在那里每隔一段时间（Δt）从流水线上流出一个产品，而生产这个产品的总时间要比 Δt 大得多。由于流水线上各部件并行工作，同时对多条指令进行解释执行，机器的吞吐率将大大提高。例如，将一条指令的执行过程分成取指令、指令译码、取操作数和执行四个子过程，分别由四个功能部件来完成，每个子过程所需时间为 Δt。</p><h4 id="流水线分类" tabindex="-1">流水线分类 <a class="header-anchor" href="#流水线分类" aria-label="Permalink to &quot;流水线分类&quot;">​</a></h4><ol><li><p>按处理级别分类</p><p>流水线按处理级别可分为操作部件级、指令级和处理机级三种。操作部件级流水线是将复杂的算逻运算组成流水线工作方式。指令级流水线则是将指令的整个执行过程分成多个子过程。处理机级流水线又称为宏流水线，这种流水线由两个或两个以上处理机通过存储器串行连接起来，每个处理机对同一数据流的不同部分分别进行处理。各个处理机的输出结果存放在与下一个处理机所共享的存储器中。每个处理机完成某一专门任务。</p></li><li><p>按功能分类</p><p>流水线按功能可分成单功能流水线和多功能流水线两种。单功能流水线只能实现一种固定的功能。多功能流水线则可有多种连接方式来实现多种功能。</p></li><li><p>按工作方式分类</p><p>静态流水线在同一时间内只能以一种方式工作。它可以是单功能的，也可以是多功能的。当是多功能流水线，且从一种功能方式变为另一种功能方式时，必须先排空流水线，然后为另一种功能设置初始条件后方可使用。显然，不希望这种功能的转换频繁发生，否则将严重影响流水线的处理效率。</p><p>动态流水线则允许在同一时间内将不同的功能段连接成不同的功能子集，以完成不同的功能。显然，动态流水线必是多功能流水线，而单功能流水线必是静态的。</p></li><li><p>按流水线结构分类</p><p>流水线按结构分为线性流水线和非线性流水线两种。在线性流水线中，从输入到输出，每个功能段只允许经过一次，不存在反馈回路。一般的流水线均属这一类。非线性流水线除有串行连接通路外，还有反馈回路，在流水过程中，某些功能段要反复多次使用。非线性流水线常用于递归或组成多功能流水线。</p></li></ol><h4 id="指令流水线的相关性" tabindex="-1">指令流水线的相关性 <a class="header-anchor" href="#指令流水线的相关性" aria-label="Permalink to &quot;指令流水线的相关性&quot;">​</a></h4><p>对于指令流水线，相邻或相近的两条指令可能会因为存在某种关联，后一条指令不能按照原指定的时钟周期运行，使流水线断流。指令流水线的相关性包括结构相关、数据相关、控制相关。</p><ol><li><p>结构相关</p><p>同一时刻争夺同一资源而形成的冲突称为结构相关，也称资源相关。</p></li><li><p>数据相关</p><p>后续指令要使用前面指令的操作结果，而这一结果尚未产生或未送到指定的位置，造成后续指令无法运行的称为数据相关。</p><p>数据相关可分为 RAW（写后读）、WAR（读后写）和 WAW（写后写）3 种类型。</p></li><li><p>控制相关</p><p>控制相关主要是由转移指令引起的，又称为指令相关。</p></li></ol>',13);function U(K,G,z,E,O,W){const T=s("mjx-assistive-mml"),o=s("mjx-container");return Q(),l("div",null,[H,a(o,{class:"MathJax",jax:"SVG",display:"true",style:{direction:"ltr",display:"block","text-align":"center",margin:"1em 0",position:"relative"}},{default:e(()=>[(Q(),l("svg",L,f)),a(T,{unselectable:"on",display:"block",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",overflow:"hidden",width:"100%"}},{default:e(()=>[w]),_:1})]),_:1}),_,t("p",null,[r("测试段如果只有一位，则微地址将产生两个分支；若有两位，则最多可产生四个分支；依次类推；测试段为 n 位最多可产生"),a(o,{class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},{default:e(()=>[(Q(),l("svg",k,b)),a(T,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:e(()=>[M]),_:1})]),_:1}),r("个分支。")]),y,a(o,{class:"MathJax",jax:"SVG",display:"true",style:{direction:"ltr",display:"block","text-align":"center",margin:"1em 0",position:"relative"}},{default:e(()=>[(Q(),l("svg",V,P)),a(T,{unselectable:"on",display:"block",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",overflow:"hidden",width:"100%"}},{default:e(()=>[Z]),_:1})]),_:1}),D,a(o,{class:"MathJax",jax:"SVG",display:"true",style:{direction:"ltr",display:"block","text-align":"center",margin:"1em 0",position:"relative"}},{default:e(()=>[(Q(),l("svg",C,R)),a(T,{unselectable:"on",display:"block",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",overflow:"hidden",width:"100%"}},{default:e(()=>[A]),_:1})]),_:1}),S,a(o,{class:"MathJax",jax:"SVG",display:"true",style:{direction:"ltr",display:"block","text-align":"center",margin:"1em 0",position:"relative"}},{default:e(()=>[(Q(),l("svg",I,N)),a(T,{unselectable:"on",display:"block",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",overflow:"hidden",width:"100%"}},{default:e(()=>[j]),_:1})]),_:1}),J])}const X=n(u,[["render",U]]);export{F as __pageData,X as default};
